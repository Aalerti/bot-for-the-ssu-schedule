import logging

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from services.database import (get_user_group, get_group_schedule,
                               get_user_faculty_id, show_today_schedule_to_user,
                               show_tomorrow_schedule_to_user, show_week_schedule_to_user)
from services.week_type import determine_week_type
from datetime import datetime, timedelta
import pytz

router = Router()


@router.message(F.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
async def handler_today(message: types.Message):
    try:
        user_faculty = get_user_faculty_id(message.from_user.id)
        user_group = get_user_group(message.from_user.id)
        if (not user_group):
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–ø–∏—à–∏ /start")
            return

        utc_time = message.date

        if utc_time.tzinfo is not None:
            utc_time = utc_time.astimezone(pytz.utc)
        else:
            utc_time = pytz.utc.localize(utc_time)

        saratov_zone = pytz.timezone('Europe/Saratov')
        saratov_time = utc_time.astimezone(saratov_zone)
        saratov_date = saratov_time.date()
        week_type = determine_week_type(saratov_date)

        schedule = get_group_schedule(user_faculty, user_group, week_type)

        day_name = get_name_of_day(saratov_date.weekday())

        await message.answer(show_today_schedule_to_user(schedule, day_name, week_type))

    except Exception as e:
        logging.error(f"Errom in handler_today: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.message(F.text == "üìÖ –ó–∞–≤—Ç—Ä–∞")
async def handler_tomorrow(message: types.Message):
    try:
        user_faculty = get_user_faculty_id(message.from_user.id)
        user_group = get_user_group(message.from_user.id)
        if (not user_group):
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–ø–∏—à–∏ /start")
            return

        utc_time = message.date

        if utc_time.tzinfo is not None:
            utc_time = utc_time.astimezone(pytz.utc)
        else:
            utc_time = pytz.utc.localize(utc_time)

        saratov_zone = pytz.timezone('Europe/Saratov')
        saratov_time = utc_time.astimezone(saratov_zone)
        saratov_date = saratov_time.date() + timedelta(days=1)
        week_type = determine_week_type(saratov_date)

        schedule = get_group_schedule(user_faculty, user_group, week_type)

        day_name = get_name_of_day(saratov_date.weekday())

        await message.answer(show_tomorrow_schedule_to_user(schedule, day_name, week_type))

    except Exception as e:
        logging.error(f"Errom in handler_tomorrow: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.message(F.text == "üìÖ –ù–µ–¥–µ–ª—è")
async def handler_week(message: types.Message):
    try:
        user_faculty = get_user_faculty_id(message.from_user.id)
        user_group = get_user_group(message.from_user.id)
        if (not user_group):
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–ø–∏—à–∏ /start")
            return

        utc_time = message.date

        if utc_time.tzinfo is not None:
            utc_time = utc_time.astimezone(pytz.utc)
        else:
            utc_time = pytz.utc.localize(utc_time)

        saratov_zone = pytz.timezone('Europe/Saratov')
        saratov_time = utc_time.astimezone(saratov_zone)
        saratov_date = saratov_time.date() + timedelta(days=1)
        week_type = determine_week_type(saratov_date)

        schedule = get_group_schedule(user_faculty, user_group, week_type)

        await message.answer(show_week_schedule_to_user(schedule, week_type))

    except Exception as e:
        logging.error(f"Errom in handler_week: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def handle_help(message: types.Message):
    help_text = """
        ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:</b>
        
        üìÖ <b>–°–µ–≥–æ–¥–Ω—è</b> - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        üìÜ <b>–ó–∞–≤—Ç—Ä–∞</b> - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        üìã <b>–ù–µ–¥–µ–ª—è</b> - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
        
        üîÑ <b>–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É</b> - –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
        
        üìä –ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã.
    """
    await message.answer(help_text, parse_mode="HTML")

@router.message(F.text == "üìã –ú–µ–Ω—é")
async def handle_menu(message: types.Message):

    user_group = get_user_group(message.from_user.id)

    if not user_group:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–ø–∏—à–∏ /start")
        return

    from services.keyboards import get_main_keyboard
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def handle_change_group(message: types.Message, state: FSMContext):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã.
        –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ.
    """
    try:
        await state.clear()

        from services.database import delete_user_data
        delete_user_data(message.from_user.id)


        from handlers.start import Registration
        from services.keyboards import get_faculties_keyboard

        await message.answer(
            "–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:",
            reply_markup=get_faculties_keyboard()
        )


        await state.set_state(Registration.choosing_faculty)

    except Exception as e:
        logging.error(f"Error in handle_change_group: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def get_name_of_day(day_number: int) -> str:
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return  days[day_number - 1]

